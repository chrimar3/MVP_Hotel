version: '3.8'

services:
  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: mvp-hotel:latest
    container_name: mvp-hotel-app
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - HEALTH_CHECK_HOST=localhost
      - HEALTH_CHECK_PORT=8080
    volumes:
      - ./logs:/var/log/nginx
    restart: unless-stopped
    healthcheck:
      test: ["/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`mvp-hotel.localhost`)"
      - "traefik.http.services.app.loadbalancer.server.port=8080"
    networks:
      - app-network
    depends_on:
      - redis
      - db

  # Development version
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: mvp-hotel:dev
    container_name: mvp-hotel-dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    volumes:
      - .:/app
      - /app/node_modules
    restart: unless-stopped
    profiles: ["dev"]
    networks:
      - app-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: mvp-hotel-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - app-network

  # PostgreSQL database (if needed)
  db:
    image: postgres:15-alpine
    container_name: mvp-hotel-db
    environment:
      - POSTGRES_DB=mvp_hotel
      - POSTGRES_USER=app_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_password_change_me}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_user -d mvp_hotel"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - app-network
    profiles: ["full"]

  # Nginx reverse proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: mvp-hotel-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx-proxy.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped
    profiles: ["full"]
    networks:
      - app-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: mvp-hotel-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles: ["monitoring"]
    networks:
      - monitoring-network
      - app-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: mvp-hotel-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    profiles: ["monitoring"]
    networks:
      - monitoring-network

  # Log aggregation - Loki
  loki:
    image: grafana/loki:latest
    container_name: mvp-hotel-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    profiles: ["monitoring"]
    networks:
      - monitoring-network

  # Log shipping - Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: mvp-hotel-promtail
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml
      - ./logs:/var/log
      - /var/log:/host/var/log:ro
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    profiles: ["monitoring"]
    networks:
      - monitoring-network

  # Load testing
  k6:
    image: grafana/k6:latest
    container_name: mvp-hotel-k6
    volumes:
      - ./tests/load:/scripts
    command: run /scripts/load-test.js
    profiles: ["testing"]
    networks:
      - app-network

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  monitoring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16